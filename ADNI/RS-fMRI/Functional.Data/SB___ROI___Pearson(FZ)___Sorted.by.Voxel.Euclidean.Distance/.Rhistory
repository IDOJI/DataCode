FPCA_Train.list[[1]][[1]]
test_fpca = FPCA_Train.list[[1]][[1]]
class(test_fpca)
class(test_fpca$harmonics)
Smoothing_Test.list[[1]] %>% length
Smoothing_Test.list = lapply(path_Smoothed_Files_Test, readRDS) %>% setNames(basename_sans_ext(path_Smoothed_Files_Test))
Smoothing_Test.list[[1]] %>% names
Smoothing_Test.list %>% names
test_Smoothing =  Smoothing_Test.list[[1]][[1]]
class(test_Smoothing$smoothing)
class(test_Smoothing$smoothing$fd)
test_Smoothing$smoothing$fd
test_fpca$harmonics
PC = fda::inprod(fdobj1 = test_Smoothing$smoothing$fd,
fdobj2 = test_fpca$harmonics)
PC
dim(PC)
test_Smoothing
test_Smoothing$smoothing$y %>% dim
length(FPCA_Train.list)
i=1
ith_FPCA_Train = FPCA_Train.list[[i]]
length(ith_FPCA_Train)
names(ith_FPCA_Train)
FPCA = ith_FPCA_Train
path_Export = path_FPCA
fs::dir_create(path_Export, recurse = T)
FPCA_Scores_GroupNum = c()
seq_along(FPCA)
ith_Region = FPCA[[i]]
ith_Region
ith_PC_Scores = ith_Region$scores %>% as.data.frame
names(ith_PC_Scores) = paste0(names(FPCA)[i], "___", 1:ncol(ith_PC_Scores))
ith_PC_Scores
# Extract FPCA scores
FPCA_Scores = lapply(seq_along(FPCA), function(i){
ith_Region = FPCA[[i]]
ith_PC_Scores = ith_Region$scores %>% as.data.frame
names(ith_PC_Scores) = paste0(names(FPCA)[i], "___", 1:ncol(ith_PC_Scores))
FPCA_Scores_GroupNum <<- c(FPCA_Scores_GroupNum, rep(i, times = ncol(ith_PC_Scores)))
return(ith_PC_Scores)
})
FPCA_Scores
FPCA_Scores = do.call(cbind, FPCA_Scores)
dim(FPCA_Scores)
FPCA_Scores = do.call(cbind, FPCA_Scores)
FPCA_Combined = list(fPCA_Scores = FPCA_Scores, Features_Group_Nums = FPCA_Scores_GroupNum)
path_FPCA
Names_FPCA_Train
Names_Smoothed_Files
#===============================================================================
# Exporting fPCA scores for Train
#===============================================================================
Extract_fPCA_Scores_with_GroupNums = function(FPCA, path_Export, File.Name){
# Export directory
fs::dir_create(path_Export, recurse = T)
# Group lasso를 위한 numbering
FPCA_Scores_GroupNum = c()
# Extract FPCA scores
FPCA_Scores = lapply(seq_along(FPCA), function(i){
ith_Region = FPCA[[i]]
ith_PC_Scores = ith_Region$scores %>% as.data.frame
names(ith_PC_Scores) = paste0(names(FPCA)[i], "___", 1:ncol(ith_PC_Scores))
FPCA_Scores_GroupNum <<- c(FPCA_Scores_GroupNum, rep(i, times = ncol(ith_PC_Scores)))
return(ith_PC_Scores)
})
FPCA_Scores = do.call(cbind, FPCA_Scores)
FPCA_Combined = list(fPCA_Scores = FPCA_Scores, Features_Group_Nums = FPCA_Scores_GroupNum)
saveRDS(FPCA_Combined, file = paste0(path_Export, "/", File.Name, "___Scores___Train.rds"))
}
?mapply
#===============================================================================
# Exporting fPCA scores for Train
#===============================================================================
Extract_fPCA_Scores_with_GroupNums = function(FPCA, path_Export, File.Name){
# Export directory
fs::dir_create(path_Export, recurse = T)
# Group lasso를 위한 numbering
FPCA_Scores_GroupNum = c()
# Extract FPCA scores
FPCA_Scores = lapply(seq_along(FPCA), function(i){
ith_Region = FPCA[[i]]
ith_PC_Scores = ith_Region$scores %>% as.data.frame
names(ith_PC_Scores) = paste0(names(FPCA)[i], "___", 1:ncol(ith_PC_Scores))
FPCA_Scores_GroupNum <<- c(FPCA_Scores_GroupNum, rep(i, times = ncol(ith_PC_Scores)))
return(ith_PC_Scores)
})
FPCA_Scores = do.call(cbind, FPCA_Scores)
FPCA_Combined = list(fPCA_Scores = FPCA_Scores, Features_Group_Nums = FPCA_Scores_GroupNum)
saveRDS(FPCA_Combined, file = paste0(path_Export, "/", File.Name, "___Scores___Train.rds"))
}
# Extracting
FPCA_Scores = mapply(Extract_fPCA_Scores_with_GroupNums,
FPCA = FPCA.list,
File.Name = Names_Smoothed_Files,
path_Export = path_FPCA,
SIMPLIFY = FALSE)
# Extracting
FPCA_Scores = mapply(Extract_fPCA_Scores_with_GroupNums,
FPCA = FPCA_Train.list,
File.Name = Names_Smoothed_Files,
path_Export = path_FPCA,
SIMPLIFY = FALSE)
#===============================================================================
# Exporting fPCA scores for Train
#===============================================================================
Extract_fPCA_Scores_with_GroupNums = function(FPCA, path_Export, File.Name){
# Export directory
fs::dir_create(path_Export, recurse = T)
# Group lasso를 위한 numbering
FPCA_Scores_GroupNum = c()
# Extract FPCA scores
FPCA_Scores = lapply(seq_along(FPCA), function(i){
ith_Region = FPCA[[i]]
ith_PC_Scores = ith_Region$scores %>% as.data.frame
names(ith_PC_Scores) = paste0(names(FPCA)[i], "___", 1:ncol(ith_PC_Scores))
FPCA_Scores_GroupNum <<- c(FPCA_Scores_GroupNum, rep(i, times = ncol(ith_PC_Scores)))
return(ith_PC_Scores)
})
FPCA_Scores = do.call(cbind, FPCA_Scores)
FPCA_Combined = list(fPCA_Scores = FPCA_Scores, Features_Group_Nums = FPCA_Scores_GroupNum)
saveRDS(FPCA_Combined, file = paste0(path_Export, "/Scores___", File.Name, "___Train.rds"))
}
# Extracting
FPCA_Scores = mapply(Extract_fPCA_Scores_with_GroupNums,
FPCA = FPCA_Train.list,
File.Name = Names_Smoothed_Files,
path_Export = path_FPCA,
SIMPLIFY = FALSE)
seq_along(FPCA_Train.list)
i=1
ith_FPCA_Train = FPCA_Train.list[[i]]
j=1
ith_FPCA_Train[[j]]
ith_FPCA_Train[[j]] %>% class
ijth_Region_FCPA_Train = ith_FPCA_Train[[j]]
ijth_Region_FCPA_Train
length(Smoothing_Test.list)
names(Smoothing_Test.list)
data.frame(names(Smoothing_Test.list), names(ith_FPCA_Train))
data.frame(names(Smoothing_Test.list), names(FPCA_Train.list))
w
data.frame(names(Smoothing_Test.list), names(FPCA_Train.list)) %>% View
ith_Smoothing_Test = Smoothing_Test.list[[i]]
length(ith_Smoothing_Test)
seq_along(ith_FPCA_Train)
ijth_Region_Smoothing_Test = ith_Smoothing_Test[[j]]
ijth_Scores_Test = fda::inprod(fdobj1 = ijth_Region_Smoothing_Test$smoothing$fd,
fdobj2 = ijth_Region_FCPA_Train$harmonics)
ijth_Scores_Test
names(ijth_Region_FCPA_Train$harmonics)
colnames(ijth_Region_FCPA_Train$harmonics)
colnames(ijth_Region_FCPA_Train$harmonics$coefs)
names(ijth_Scores_Test) = colnames(ijth_Region_FCPA_Train$harmonics$coefs)
View(ijth_Scores_Test)
colnames(ijth_Scores_Test) = colnames(ijth_Region_FCPA_Train$harmonics$coefs)
ijth_Region_Smoothing_Test$smoothing$y
colnames(ijth_Region_Smoothing_Test$smoothing$y)
rownames(ijth_Scores_Test) = colnames(ijth_Region_Smoothing_Test$smoothing$y)
names(ith_Smoothing_Test)
names(ith_FPCA_Train)
ith_Scores_Test = lapply(seq_along(ith_FPCA_Train), function(j){
ijth_Region_FCPA_Train = ith_FPCA_Train[[j]]
ijth_Scores_Test = fda::inprod(fdobj1 = ijth_Region_Smoothing_Test$smoothing$fd,
fdobj2 = ijth_Region_FCPA_Train$harmonics)
colnames(ijth_Scores_Test) = colnames(ijth_Region_FCPA_Train$harmonics$coefs)
rownames(ijth_Scores_Test) = colnames(ijth_Region_Smoothing_Test$smoothing$y)
return(ijth_Scores_Test)
}) %>% setNames(names(ith_FPCA_Train))
length(ith_Smoothing_Test)
ith_Scores_Test = lapply(seq_along(ith_FPCA_Train), function(j){
print(j)
ijth_Region_FCPA_Train = ith_FPCA_Train[[j]]
ijth_Region_Smoothing_Test = ith_Smoothing_Test[[j]]
ijth_Scores_Test = fda::inprod(fdobj1 = ijth_Region_Smoothing_Test$smoothing$fd,
fdobj2 = ijth_Region_FCPA_Train$harmonics)
colnames(ijth_Scores_Test) = colnames(ijth_Region_FCPA_Train$harmonics$coefs)
rownames(ijth_Scores_Test) = colnames(ijth_Region_Smoothing_Test$smoothing$y)
return(ijth_Scores_Test)
}) %>% setNames(names(ith_FPCA_Train))
length(ith_Scores_Test)
names(ith_Scores_Test)
ith_Smoothing_Test
Names_Smoothed_Files
Names_Smoothed_Files[i]
seq_along(FPCA_Train.list)
Names_Smoothed_Files[i]
#===============================================================================
# Exporting fPCA scores for Train
#===============================================================================
for(i in seq_along(FPCA_Train.list)){
ith_FPCA_Train = FPCA_Train.list[[i]]
ith_Smoothing_Test = Smoothing_Test.list[[i]]
ith_Scores_Test = lapply(seq_along(ith_FPCA_Train), function(j){
ijth_Region_FCPA_Train = ith_FPCA_Train[[j]]
ijth_Region_Smoothing_Test = ith_Smoothing_Test[[j]]
ijth_Scores_Test = fda::inprod(fdobj1 = ijth_Region_Smoothing_Test$smoothing$fd,
fdobj2 = ijth_Region_FCPA_Train$harmonics)
colnames(ijth_Scores_Test) = colnames(ijth_Region_FCPA_Train$harmonics$coefs)
rownames(ijth_Scores_Test) = colnames(ijth_Region_Smoothing_Test$smoothing$y)
return(ijth_Scores_Test)
}) %>% setNames(names(ith_FPCA_Train))
readRDS(ith_Scores_Test, file = paste0(path_FPCA, "/Scores", Names_Smoothed_Files[i], "___Test.rds"))
}
#===============================================================================
# Exporting fPCA scores for Train
#===============================================================================
for(i in seq_along(FPCA_Train.list)){
ith_FPCA_Train = FPCA_Train.list[[i]]
ith_Smoothing_Test = Smoothing_Test.list[[i]]
ith_Scores_Test = lapply(seq_along(ith_FPCA_Train), function(j){
ijth_Region_FCPA_Train = ith_FPCA_Train[[j]]
ijth_Region_Smoothing_Test = ith_Smoothing_Test[[j]]
ijth_Scores_Test = fda::inprod(fdobj1 = ijth_Region_Smoothing_Test$smoothing$fd,
fdobj2 = ijth_Region_FCPA_Train$harmonics)
colnames(ijth_Scores_Test) = colnames(ijth_Region_FCPA_Train$harmonics$coefs)
rownames(ijth_Scores_Test) = colnames(ijth_Region_Smoothing_Test$smoothing$y)
return(ijth_Scores_Test)
}) %>% setNames(names(ith_FPCA_Train))
saveRDS(ith_Scores_Test, file = paste0(path_FPCA, "/Scores", Names_Smoothed_Files[i], "___Test.rds"))
}
rm(list=ls())
path_OS = "C:/Users/lleii/"
# rm(list=ls())
#=============================================================================================
# Mac
#=============================================================================================
# path_OS = "/Users/Ido/"
#============================================================================================
# Windows
#============================================================================================
# path_OS = "C:/Users/lleii/"
#============================================================================================
require(tidyverse)
require(dplyr)
require(clipr)
require(fda)
requier(tidyr)
#=============================================================================================
path_Dropbox = paste0(path_OS, "Dropbox")
path_GitHub = list.files(path_Dropbox, pattern = "Github", full.names = T)
path_Rpkgs = list.files(path_GitHub, pattern = "Rpkgs", full.names = T)
Rpkgs = c("ADNIprep", "StatsR", "refineR")
Load = sapply(Rpkgs, function(y){
list.files(paste0(path_Rpkgs, "/", y, "/R"), full.names = T) %>% walk(source)
})
#=============================================================================================
path_Data = paste0(path_Dropbox, "/Data")
path_ADNI = list.files(path_Data, full.names = T, pattern = "ADNI")
path_Subjects = list.files(path_ADNI, full.names = TRUE, pattern = "Subjects.Lists") %>%
list.files(., full.names = TRUE) %>%
grep("Subjects_Lists_Exported$", ., value = TRUE) %>%
list.files(., full.names = TRUE) %>%
grep("Final$", ., value = TRUE) %>%
list.files(., full.names = TRUE) %>%
grep("list.csv$", ., value  =TRUE)
path_FD = list.files(path_ADNI, full.names = T, pattern = "Functional.Data")
path_Euclidean = list.files(path_FD, pattern = "Euclidean", full.names=TRUE)
#===============================================================================
# Path
#===============================================================================
path_Smoothed = list.files(path_Euclidean, full.names = T, pattern = "Smoothing") %>%
list.files(., full.names = T)
# Subjects List Names
Names_Subjects = path_Smoothed %>% grep("\\.rds$", ., value = T, invert = T) %>% basename_sans_ext()
# Smoothed files
path_Smoothed_Files = path_Smoothed %>% grep("\\.rds$", ., value = T)
path_Smoothed_Files_Train = path_Smoothed_Files %>% grep("Train", ., value = T)
path_Smoothed_Files_Test = path_Smoothed_Files %>% grep("Test", ., value = T)
Names_Smoothed_Files = path_Smoothed_Files %>%
basename_sans_ext() %>%
grep("Train", ., value = T) %>%
gsub("___Train", "", .)
# Save
path_FPCA = list.files(path_Euclidean, pattern = "FPCA", full.names=T)
#===============================================================================
# Loading smoothing Data
#===============================================================================
Smoothing_Train.list = lapply(path_Smoothed_Files_Train, readRDS) %>% setNames(basename_sans_ext(path_Smoothed_Files_Train))
Smoothing_Test.list = lapply(path_Smoothed_Files_Test, readRDS) %>% setNames(basename_sans_ext(path_Smoothed_Files_Test))
#===============================================================================
# Functional fPCA for Train data
#===============================================================================
Names_Smoothing_Train = names(Smoothing_Train.list)
# Load data
path_FPCA_Train = list.files(path_FPCA, full.name = T, pattern = "\\.rds$")
Names_FPCA_Train = path_FPCA_Train %>% basename_sans_ext()
FPCA_Train.list = lapply(path_FPCA_Train, readRDS) %>% setNames(Names_FPCA_Train)
#===============================================================================
# Exporting fPCA scores for Train
#===============================================================================
Extract_fPCA_Scores_with_GroupNums = function(FPCA, path_Export, File.Name){
# Export directory
fs::dir_create(path_Export, recurse = T)
# Group lasso를 위한 numbering
FPCA_Scores_GroupNum = c()
# Extract FPCA scores
FPCA_Scores = lapply(seq_along(FPCA), function(i){
ith_Region = FPCA[[i]]
ith_PC_Scores = ith_Region$scores %>% as.data.frame
names(ith_PC_Scores) = paste0(names(FPCA)[i], "___", 1:ncol(ith_PC_Scores))
FPCA_Scores_GroupNum <<- c(FPCA_Scores_GroupNum, rep(i, times = ncol(ith_PC_Scores)))
return(ith_PC_Scores)
})
FPCA_Scores = do.call(cbind, FPCA_Scores)
FPCA_Combined = list(fPCA_Scores = FPCA_Scores, Features_Group_Nums = FPCA_Scores_GroupNum)
saveRDS(FPCA_Combined, file = paste0(path_Export, "/Scores___", File.Name, "___Train.rds"))
}
#===============================================================================
# Exporting fPCA scores for Train
#===============================================================================
for(i in seq_along(FPCA_Train.list)){
ith_FPCA_Train = FPCA_Train.list[[i]]
ith_Smoothing_Test = Smoothing_Test.list[[i]]
ith_Scores_Test = lapply(seq_along(ith_FPCA_Train), function(j){
ijth_Region_FCPA_Train = ith_FPCA_Train[[j]]
ijth_Region_Smoothing_Test = ith_Smoothing_Test[[j]]
ijth_Scores_Test = fda::inprod(fdobj1 = ijth_Region_Smoothing_Test$smoothing$fd,
fdobj2 = ijth_Region_FCPA_Train$harmonics)
colnames(ijth_Scores_Test) = colnames(ijth_Region_FCPA_Train$harmonics$coefs)
rownames(ijth_Scores_Test) = colnames(ijth_Region_Smoothing_Test$smoothing$y)
return(ijth_Scores_Test)
}) %>% setNames(names(ith_FPCA_Train))
saveRDS(ith_Scores_Test, file = paste0(path_FPCA, "/Scores___", Names_Smoothed_Files[i], "___Test.rds"))
}
seq_along(FPCA_Train.list)
FPCA_Train.list
path_FPCA_Train
# Load data
path_FPCA_Train = list.files(path_FPCA, full.name = T, pattern = "\\.rds$") %>%
grep("Scores", ., value = T, invert = T)
Names_FPCA_Train = path_FPCA_Train %>% basename_sans_ext()
FPCA_Train.list = lapply(path_FPCA_Train, readRDS) %>% setNames(Names_FPCA_Train)
path_FPCA_Train
#===============================================================================
# Exporting fPCA scores for Train
#===============================================================================
for(i in seq_along(FPCA_Train.list)){
ith_FPCA_Train = FPCA_Train.list[[i]]
ith_Smoothing_Test = Smoothing_Test.list[[i]]
ith_Scores_Test = lapply(seq_along(ith_FPCA_Train), function(j){
ijth_Region_FCPA_Train = ith_FPCA_Train[[j]]
ijth_Region_Smoothing_Test = ith_Smoothing_Test[[j]]
ijth_Scores_Test = fda::inprod(fdobj1 = ijth_Region_Smoothing_Test$smoothing$fd,
fdobj2 = ijth_Region_FCPA_Train$harmonics)
colnames(ijth_Scores_Test) = colnames(ijth_Region_FCPA_Train$harmonics$coefs)
rownames(ijth_Scores_Test) = colnames(ijth_Region_Smoothing_Test$smoothing$y)
return(ijth_Scores_Test)
}) %>% setNames(names(ith_FPCA_Train))
saveRDS(ith_Scores_Test, file = paste0(path_FPCA, "/Scores___", Names_Smoothed_Files[i], "___Test.rds"))
}
#===============================================================================
# Exporting fPCA scores for Train
#===============================================================================
for(i in seq_along(FPCA_Train.list)){
tictoc::tic()
ith_FPCA_Train = FPCA_Train.list[[i]]
ith_Smoothing_Test = Smoothing_Test.list[[i]]
ith_Scores_Test = lapply(seq_along(ith_FPCA_Train), function(j){
ijth_Region_FCPA_Train = ith_FPCA_Train[[j]]
ijth_Region_Smoothing_Test = ith_Smoothing_Test[[j]]
ijth_Scores_Test = fda::inprod(fdobj1 = ijth_Region_Smoothing_Test$smoothing$fd,
fdobj2 = ijth_Region_FCPA_Train$harmonics)
colnames(ijth_Scores_Test) = colnames(ijth_Region_FCPA_Train$harmonics$coefs)
rownames(ijth_Scores_Test) = colnames(ijth_Region_Smoothing_Test$smoothing$y)
return(ijth_Scores_Test)
}) %>% setNames(names(ith_FPCA_Train))
saveRDS(ith_Scores_Test, file = paste0(path_FPCA, "/Scores___", Names_Smoothed_Files[i], "___Test.rds"))
tictoc::toc()
}
rm(list=ls())
# rm(list=ls())
#=============================================================================================
# Mac
#=============================================================================================
# path_OS = "/Users/Ido/"
#============================================================================================
# Windows
#============================================================================================
# path_OS = "C:/Users/lleii/"
#============================================================================================
require(tidyverse)
require(dplyr)
require(clipr)
require(fda)
requier(tidyr)
#=============================================================================================
path_Dropbox = paste0(path_OS, "Dropbox")
path_GitHub = list.files(path_Dropbox, pattern = "Github", full.names = T)
path_Rpkgs = list.files(path_GitHub, pattern = "Rpkgs", full.names = T)
Rpkgs = c("ADNIprep", "StatsR", "refineR")
Load = sapply(Rpkgs, function(y){
list.files(paste0(path_Rpkgs, "/", y, "/R"), full.names = T) %>% walk(source)
})
#=============================================================================================
path_Data = paste0(path_Dropbox, "/Data")
path_ADNI = list.files(path_Data, full.names = T, pattern = "ADNI")
path_Subjects = list.files(path_ADNI, full.names = TRUE, pattern = "Subjects.Lists") %>%
list.files(., full.names = TRUE) %>%
grep("Subjects_Lists_Exported$", ., value = TRUE) %>%
list.files(., full.names = TRUE) %>%
grep("Final$", ., value = TRUE) %>%
list.files(., full.names = TRUE) %>%
grep("list.csv$", ., value  =TRUE)
path_OS = "C:/Users/lleii/"
# rm(list=ls())
#=============================================================================================
# Mac
#=============================================================================================
# path_OS = "/Users/Ido/"
#============================================================================================
# Windows
#============================================================================================
# path_OS = "C:/Users/lleii/"
#============================================================================================
require(tidyverse)
require(dplyr)
require(clipr)
require(fda)
requier(tidyr)
#=============================================================================================
path_Dropbox = paste0(path_OS, "Dropbox")
path_GitHub = list.files(path_Dropbox, pattern = "Github", full.names = T)
path_Rpkgs = list.files(path_GitHub, pattern = "Rpkgs", full.names = T)
Rpkgs = c("ADNIprep", "StatsR", "refineR")
Load = sapply(Rpkgs, function(y){
list.files(paste0(path_Rpkgs, "/", y, "/R"), full.names = T) %>% walk(source)
})
#=============================================================================================
path_Data = paste0(path_Dropbox, "/Data")
path_ADNI = list.files(path_Data, full.names = T, pattern = "ADNI")
require(tidyr)
#=============================================================================================
path_Dropbox = paste0(path_OS, "Dropbox")
path_GitHub = list.files(path_Dropbox, pattern = "Github", full.names = T)
path_Rpkgs = list.files(path_GitHub, pattern = "Rpkgs", full.names = T)
Rpkgs = c("ADNIprep", "StatsR", "refineR")
Load = sapply(Rpkgs, function(y){
list.files(paste0(path_Rpkgs, "/", y, "/R"), full.names = T) %>% walk(source)
})
#=============================================================================================
path_Data = paste0(path_Dropbox, "/Data")
path_ADNI = list.files(path_Data, full.names = T, pattern = "ADNI")
path_Subjects = list.files(path_ADNI, full.names = TRUE, pattern = "Subjects.Lists") %>%
list.files(., full.names = TRUE) %>%
grep("Subjects_Lists_Exported$", ., value = TRUE) %>%
list.files(., full.names = TRUE) %>%
grep("Final$", ., value = TRUE) %>%
list.files(., full.names = TRUE) %>%
grep("list.csv$", ., value  =TRUE)
path_FD = list.files(path_ADNI, full.names = T, pattern = "Functional.Data")
path_Euclidean = list.files(path_FD, pattern = "Euclidean", full.names=TRUE)
#=============================================================================================
path_Data = paste0(path_Dropbox, "/Data")
path_ADNI = list.files(path_Data, full.names = T, pattern = "ADNI")
path_Subjects = list.files(path_ADNI, full.names = TRUE, pattern = "Subjects.Lists") %>%
list.files(., full.names = TRUE) %>%
grep("Subjects_Lists_Exported$", ., value = TRUE) %>%
list.files(., full.names = TRUE) %>%
grep("Final$", ., value = TRUE) %>%
list.files(., full.names = TRUE) %>%
grep("list.csv$", ., value  =TRUE)
path_FD = list.files(path_ADNI, full.names = T, pattern = "Functional.Data")
path_Euclidean = list.files(path_FD, pattern = "Euclidean", full.names=TRUE)
#=============================================================================================
path_Euclidean
path_FPCA = list.files(path_Euclidean, pattern = "FPCA", full.names=TRUE)
path_FPCA
#===============================================================================
# Path
#===============================================================================
# PC Scores
path_Scores_Train = list.files(path_FPCA, full.names=T, pattern = "Scores") %>%
grep("Train", ., value = T)
path_Scores_Train
#===============================================================================
# Path
#===============================================================================
# PC Scores
path_Scores = list.files(path_FPCA, full.names=T, pattern = "Scores")
path_Scores
path_Scores_Train = path_Scores %>% grep("Train", ., value = T)
path_Scores_Test = path_Scores %>% grep("Test", ., value = T)
path_Subjects
path_Subjects = list.files(path_Euclidean, pattern = "Subjects", full.names=T)
path_Subjects
path_Subjects = list.files(path_Euclidean, pattern = "Subjects", full.names=T) %>% list.files(full.names = T)
path_Subjects
list.files(path_FPCA, full.names=T, pattern = "FPCA")
path_Smoothing = list.files(path_FPCA, pattern = "Smoothig", full.names = T)
path_Smoothing
path_Smoothing = list.files(path_FPCA, pattern = "Smoothing", full.names = T)
path_Smoothing
#===============================================================================
# Path
#===============================================================================
# Smoothing
path_Smoothing = list.files(path_Euclidean, pattern = "Smoothing", full.names = T)
path_Smoothing
#===============================================================================
# Path
#===============================================================================
# Smoothing
path_Smoothing = list.files(path_Euclidean, pattern = "Smoothing", full.names = T) %>% list.files(full.names=T)
path_Smoothing
path_Subjects
path_Smoothing
path_SortedFC = list.files(path_Euclidean, pattern = "Sorted", full.names = T) %>% list.files(full.names=T)
path_SortedFC
path_Scores_Test
path_Scores_Test %>% basename_sans_ext()
require(stringr)
